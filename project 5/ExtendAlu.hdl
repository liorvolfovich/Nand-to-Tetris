// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:

     // computes the regular ALU output
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0],
          out=ALUout, zr=zr1, ng=ng1);
     
     // shifts x and y right and left
     ShiftLeft(in=x, out=leftx);
     ShiftLeft(in=y, out=lefty);
     ShiftRight(in=x, out=rightx);
     ShiftRight(in=y, out=righty);

     // choosing the correct output with muxes
     Mux16(a=rightx, b=leftx, sel=instruction[5], out=shiftx);
     Mux16(a=righty, b=lefty, sel=instruction[5], out=shifty);
     Mux16(a=shifty, b=shiftx, sel=instruction[4], out=shifted);
     Mux16(a=shifted, b=ALUout, sel=instruction[8], out=out, out[0..7]=out1, out[8..15]=out2, out[15]=out3);

     //zr
     Or8Way(in=out1, out=or1);
     Or8Way(in=out2, out=or2);
     Or(a=or1, b=or2, out=or3);
     Not(in=or3, out=zr);

     //ng
     Mux(a=false, b=true, sel=out3, out=ng);
}
